// routes/cars.js
import express from "express";
import multer from "multer";
import { v2 as cloudinary } from "cloudinary";
import Car from "../models/Car.js";

const router = express.Router();

// üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
  cloud_name: "dvm6my9na",
  api_key: "241795374821197",
  api_secret: "TutoKTr9lCuBdzSOgZXh_gXDbBY",
});

// üîß multer ‚Äî —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  limits: { fileSize: 50 * 1024 * 1024 }, // –º–∞–∫—Å–∏–º—É–º 15 MB –Ω–∞ —Ñ–∞–π–ª
});

// üìå –•–ï–õ–ü–ï–† –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary
const uploadToCloudinary = async (file, folder = "cars") => {
  try {
    return await new Promise((resolve, reject) => {
      const timeout = setTimeout(() => reject(new Error("‚è±Ô∏è Cloudinary timeout")), 60000);

      const stream = cloudinary.uploader.upload_stream(
        {
          folder,
          resource_type: file.mimetype.startsWith("video") ? "video" : "image",
        },
        (err, result) => {
          clearTimeout(timeout);
          if (err) reject(err);
          else resolve(result.secure_url);
        }
      );

      stream.end(file.buffer);
    });
  } catch (error) {
    console.error("Cloudinary upload error:", error);
    return null; // —á—Ç–æ–±—ã –Ω–µ –∫—Ä–∞—à–∏–ª–æ Promise.all
  }
};


// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ 4-–∑–Ω–∞—á–Ω–æ–≥–æ carId ===
const generateCarId = async () => {
  let id;
  let exists = true;

  while (exists) {
    id = Math.floor(1000 + Math.random() * 9000); // 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
    exists = await Car.findOne({ carId: id });
  }

  return id;
};

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã ===
router.post("/", upload.fields([{ name: "images" }, { name: "videos" }]), async (req, res) => {
  try {
    const {
      marka,
      model,
      qiymet,
      il,
      km,
      yerSayi,
      lyuk,
      boya,
      deyisen,
      yanacaq,
      vin // ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ VIN
    } = req.body;

    const carId = await generateCarId(); // —Å–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    const images = req.files.images
      ? await Promise.all(req.files.images.map(file => uploadToCloudinary(file, "cars/images")))
      : [];

    const videos = req.files.videos
      ? await Promise.all(req.files.videos.map(file => uploadToCloudinary(file, "cars/videos")))
      : [];

    const newCar = new Car({
      carId,
      marka,
      model,
      qiymet,
      il,
      km,
      yerSayi,
      lyuk,
      boya,
      deyisen,
      yanacaq,
      vin, // ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º VIN
      images,
      videos,
      createdAt: new Date(),
    });

    await newCar.save();
    res.status(201).json(newCar);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã" });
  }
});

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—à–∏–Ω ===
router.get("/", async (req, res) => {
  try {
    const cars = await Car.find().sort({ createdAt: -1 });
    res.json(cars);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω:", err);
    res.status(500).json({ message: err.message });
  }
});

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã –ø–æ id ===
router.get("/:id", async (req, res) => {
  try {
    const car = await Car.findById(req.params.id);
    if (!car) return res.status(404).json({ message: "–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    res.json(car);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã:", err);
    res.status(500).json({ message: err.message });
  }
});

// === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã ===
router.put("/:id", upload.fields([{ name: "images" }, { name: "videos" }]), async (req, res) => {
  try {
    const car = await Car.findById(req.params.id);
    if (!car) return res.status(404).json({ message: "–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });

    const {
      marka,
      model,
      qiymet,
      il,
      km,
      yerSayi,
      lyuk,
      boya,
      deyisen,
      yanacaq,
      sold,
      vin // ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ VIN –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    } = req.body;

    car.marka = marka ?? car.marka;
    car.model = model ?? car.model;
    car.qiymet = qiymet ?? car.qiymet;
    car.il = il ?? car.il;
    car.km = km ?? car.km;
    car.yerSayi = yerSayi ?? car.yerSayi;
    car.lyuk = lyuk !== undefined ? lyuk === "true" : car.lyuk;
    car.boya = boya ?? car.boya;
    car.deyisen = deyisen ?? car.deyisen;
    car.yanacaq = yanacaq ?? car.yanacaq;
    car.vin = vin ?? car.vin; // ‚úÖ –æ–±–Ω–æ–≤–ª—è–µ–º VIN –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    car.sold = sold !== undefined ? sold === "true" : car.sold;

    // –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ ‚Üí Cloudinary
    if (req.files.images && req.files.images.length > 0) {
      const newImages = await Promise.all(req.files.images.map(file => uploadToCloudinary(file, "cars/images")));
      car.images.push(...newImages);
    }

    // –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ ‚Üí Cloudinary
    if (req.files.videos && req.files.videos.length > 0) {
      const newVideos = await Promise.all(req.files.videos.map(file => uploadToCloudinary(file, "cars/videos")));
      car.videos.push(...newVideos);
    }

    await car.save();
    res.json(car);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—à–∏–Ω—ã:", err);
    res.status(500).json({ message: err.message });
  }
});

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "–ø—Ä–æ–¥–∞–Ω–æ" ===
router.patch("/:id/sold", async (req, res) => {
  try {
    const { sold } = req.body;
    const car = await Car.findByIdAndUpdate(req.params.id, { sold }, { new: true });
    if (!car) return res.status(404).json({ message: "–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    res.json(car);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–∞–Ω–æ:", err);
    res.status(500).json({ message: err.message });
  }
});

// === –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã ===
router.delete("/:id", async (req, res) => {
  try {
    const car = await Car.findByIdAndDelete(req.params.id);
    if (!car) return res.status(404).json({ message: "–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    res.json({ message: "–ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã:", err);
    res.status(500).json({ message: err.message });
  }
});

export default router;
